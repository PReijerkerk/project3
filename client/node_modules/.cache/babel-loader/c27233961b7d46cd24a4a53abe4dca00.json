{"ast":null,"code":"import _classCallCheck from \"/Users/charleyworley/Documents/code/project3/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/charleyworley/Documents/code/project3/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/charleyworley/Documents/code/project3/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/charleyworley/Documents/code/project3/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/charleyworley/Documents/code/project3/client/node_modules/@babel/runtime/helpers/esm/inherits\";\n//use this high up in your component tree as possible, have one at the top level \n//you can use this in multiple locations for testing.\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nvar ErrorBoundary =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ErrorBoundary, _React$Component);\n\n  function ErrorBoundary() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ErrorBoundary);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ErrorBoundary)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null // this will be the catch(think of a try catch\n\n    };\n    return _this;\n  }\n\n  _createClass(ErrorBoundary, [{\n    key: \"componentDidCatch\",\n    value: function componentDidCatch(error, errorInfo) {\n      this.setState({\n        hasError: true,\n        error: error,\n        errorInfo: errorInfo\n      }); // tutorial suggested Bugsnag, may need to change this \n\n      if (window.Bugsnag) {\n        window.Bugsnag.notify(error);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.hasError) {\n        return this.props.render(this.state.error, this.state.errorInfo);\n      }\n\n      return this.props.children;\n    }\n  }]);\n\n  return ErrorBoundary;\n}(React.Component);\n\nErrorBoundary.propTypes = {\n  // node represents an element or just a DOM Node \n  children: propTypes.oneOfType([propTypes.node, propTypes.arrayOf(propTypes.node)]).isRequired,\n  render: propTypes.func.isRequired\n};\nexport { ErrorBoundary as default };","map":{"version":3,"sources":["/Users/charleyworley/Documents/code/project3/client/src/components/ErrorBoundary/ErrorBoundary.js"],"names":["React","propTypes","ErrorBoundary","state","hasError","error","errorInfo","setState","window","Bugsnag","notify","props","render","children","Component","oneOfType","node","arrayOf","isRequired","func"],"mappings":";;;;;AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;IAEqBC,a;;;;;;;;;;;;;;;;;UAWnBC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAC,KADH;AAENC,MAAAA,KAAK,EAAE,IAFD;AAGNC,MAAAA,SAAS,EAAE,IAHL,CAKR;;AALQ,K;;;;;;sCAMUD,K,EAAOC,S,EAAU;AACjC,WAAKC,QAAL,CAAc;AACZH,QAAAA,QAAQ,EAAC,IADG;AAEZC,QAAAA,KAAK,EAALA,KAFY;AAGZC,QAAAA,SAAS,EAATA;AAHY,OAAd,EADiC,CAO/B;;AACF,UAAIE,MAAM,CAACC,OAAX,EAAmB;AACjBD,QAAAA,MAAM,CAACC,OAAP,CAAeC,MAAf,CAAsBL,KAAtB;AACD;AACF;;;6BACO;AACN,UAAG,KAAKF,KAAL,CAAWC,QAAd,EAAuB;AACrB,eACE,KAAKO,KAAL,CAAWC,MAAX,CACE,KAAKT,KAAL,CAAWE,KADb,EAEE,KAAKF,KAAL,CAAWG,SAFb,CADF;AAKE;;AACJ,aAAQ,KAAKK,KAAL,CAAWE,QAAnB;AACD;;;;EAtCwCb,KAAK,CAACc,S;;AAA5BZ,a,CAEZD,S,GAAY;AACjB;AACAY,EAAAA,QAAQ,EAAEZ,SAAS,CAACc,SAAV,CAAoB,CAC5Bd,SAAS,CAACe,IADkB,EAE5Bf,SAAS,CAACgB,OAAV,CAAkBhB,SAAS,CAACe,IAA5B,CAF4B,CAApB,EAGPE,UALc;AAMjBN,EAAAA,MAAM,EAAEX,SAAS,CAACkB,IAAV,CAAeD;AANN,C;SAFAhB,a","sourcesContent":["//use this high up in your component tree as possible, have one at the top level \n//you can use this in multiple locations for testing.\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nexport default class ErrorBoundary extends React.Component {\n  \n  static propTypes = {\n    // node represents an element or just a DOM Node \n    children: propTypes.oneOfType([\n      propTypes.node,\n      propTypes.arrayOf(propTypes.node)\n    ]).isRequired, \n    render: propTypes.func.isRequired\n  }\n\n  state = {\n    hasError:false, \n    error: null,\n    errorInfo: null\n  }\n  // this will be the catch(think of a try catch\n  componentDidCatch(error, errorInfo){\n    this.setState({\n      hasError:true,\n      error,\n      errorInfo\n    });\n\n      // tutorial suggested Bugsnag, may need to change this \n    if (window.Bugsnag){\n      window.Bugsnag.notify(error)\n    }\n  }\n  render(){\n    if(this.state.hasError){\n      return (\n        this.props.render(\n          this.state.error, \n          this.state.errorInfo\n        )\n      )}\n    return (this.props.children)\n  }\n}"]},"metadata":{},"sourceType":"module"}